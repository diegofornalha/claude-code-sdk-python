#!/usr/bin/env python3
"""
‚ö†Ô∏è EXEMPLO TRATAMENTO DE ERROS - Claude Code SDK Python

Este exemplo demonstra como tratar diferentes tipos de erro do SDK:
- Erros de conex√£o
- Erros de permiss√£o
- Erros de configura√ß√£o
- Implementa√ß√£o de retry autom√°tico
- Logging de erros para debug

COMO EXECUTAR:
    python examples/exemplo_tratamento_erros.py

O QUE FAZ:
    - Demonstra diferentes tipos de erro do SDK
    - Implementa tratamento robusto de exce√ß√µes
    - Mostra como lidar com falhas de conex√£o
    - Exibe mensagens de erro amig√°veis
    - Implementa retry autom√°tico para falhas tempor√°rias

REQUISITOS:
    - Claude Code instalado: npm install -g @anthropic-ai/claude-code
    - Python 3.10+
    - SDK instalado: pip install -e .
"""

import asyncio
import sys
import time
import logging
from pathlib import Path

# Adiciona o diret√≥rio src ao path para importar o SDK
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root / 'src'))

from src import (
    query, ClaudeCodeOptions, AssistantMessage, TextBlock, ResultMessage,
    ClaudeSDKError, CLINotFoundError, CLIConnectionError, ProcessError
)

# Configura logging para debug
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def exemplo_erro_cli_nao_encontrado():
    """
    Exemplo de tratamento para CLI n√£o encontrado
    """
    print("=" * 60)
    print("‚ùå EXEMPLO 1: CLI N√ÉO ENCONTRADO")
    print("=" * 60)
    
    try:
        # Tenta fazer uma query (pode falhar se CLI n√£o estiver instalado)
        prompt = "Ol√°, como voc√™ est√°?"
        
        print(f"üîç Tentando query: '{prompt}'")
        print("-" * 40)
        
        async for message in query(prompt=prompt):
            if isinstance(message, AssistantMessage):
                for block in message.content:
                    if isinstance(block, TextBlock):
                        print(f"üìù Claude: {block.text}")
        
        print("‚úÖ Query executada com sucesso!")
        
    except CLINotFoundError as e:
        print(f"‚ùå Erro: CLI do Claude Code n√£o encontrado")
        print(f"üí° Solu√ß√£o: npm install -g @anthropic-ai/claude-code")
        print(f"üîç Detalhes: {e}")
        
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")

async def exemplo_erro_conexao():
    """
    Exemplo de tratamento para erros de conex√£o
    """
    print("\n" + "=" * 60)
    print("üåê EXEMPLO 2: ERRO DE CONEX√ÉO")
    print("=" * 60)
    
    try:
        # Tenta fazer uma query que pode falhar por conex√£o
        prompt = "Me conte uma hist√≥ria curta"
        
        print(f"üîç Tentando query: '{prompt}'")
        print("-" * 40)
        
        async for message in query(prompt=prompt):
            if isinstance(message, AssistantMessage):
                for block in message.content:
                    if isinstance(block, TextBlock):
                        print(f"üìù Claude: {block.text}")
        
        print("‚úÖ Query executada com sucesso!")
        
    except CLIConnectionError as e:
        print(f"‚ùå Erro de conex√£o: {e}")
        print("üí° Poss√≠veis causas:")
        print("   - Problemas de rede")
        print("   - Claude Code n√£o est√° rodando")
        print("   - Firewall bloqueando conex√£o")
        print("üîç Detalhes t√©cnicos:", e)
        
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")

async def exemplo_erro_processo():
    """
    Exemplo de tratamento para erros de processo
    """
    print("\n" + "=" * 60)
    print("‚öôÔ∏è EXEMPLO 3: ERRO DE PROCESSO")
    print("=" * 60)
    
    try:
        # Tenta fazer uma query que pode falhar por processo
        prompt = "Execute o comando 'invalid_command' que n√£o existe"
        
        print(f"üîç Tentando query: '{prompt}'")
        print("-" * 40)
        
        async for message in query(prompt=prompt):
            if isinstance(message, AssistantMessage):
                for block in message.content:
                    if isinstance(block, TextBlock):
                        print(f"üìù Claude: {block.text}")
        
        print("‚úÖ Query executada com sucesso!")
        
    except ProcessError as e:
        print(f"‚ùå Erro de processo: {e}")
        print(f"üí° C√≥digo de sa√≠da: {e.exit_code}")
        print("üîç Poss√≠veis causas:")
        print("   - Comando inv√°lido")
        print("   - Permiss√µes insuficientes")
        print("   - Ferramenta n√£o dispon√≠vel")
        
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")

async def exemplo_retry_automatico():
    """
    Exemplo de retry autom√°tico para falhas tempor√°rias
    """
    print("\n" + "=" * 60)
    print("üîÑ EXEMPLO 4: RETRY AUTOM√ÅTICO")
    print("=" * 60)
    
    max_retries = 3
    retry_delay = 2  # segundos
    
    for attempt in range(max_retries):
        try:
            print(f"üîÑ Tentativa {attempt + 1} de {max_retries}")
            
            prompt = "Diga apenas 'Ol√°, retry funcionando!'"
            
            print(f"üîç Query: '{prompt}'")
            print("-" * 40)
            
            async for message in query(prompt=prompt):
                if isinstance(message, AssistantMessage):
                    for block in message.content:
                        if isinstance(block, TextBlock):
                            print(f"üìù Claude: {block.text}")
            
            print("‚úÖ Query executada com sucesso na primeira tentativa!")
            break
            
        except (CLIConnectionError, ProcessError) as e:
            print(f"‚ùå Tentativa {attempt + 1} falhou: {e}")
            
            if attempt < max_retries - 1:
                print(f"‚è≥ Aguardando {retry_delay} segundos antes da pr√≥xima tentativa...")
                await asyncio.sleep(retry_delay)
                retry_delay *= 2  # Backoff exponencial
            else:
                print("üí• Todas as tentativas falharam")
                
        except Exception as e:
            print(f"‚ùå Erro inesperado: {e}")
            break

async def exemplo_logging_erros():
    """
    Exemplo de logging de erros para debug
    """
    print("\n" + "=" * 60)
    print("üìù EXEMPLO 5: LOGGING DE ERROS")
    print("=" * 60)
    
    try:
        # Configura logging detalhado
        logger.info("Iniciando exemplo de logging")
        
        prompt = "Me diga uma piada curta"
        
        print(f"üîç Query: '{prompt}'")
        print("-" * 40)
        
        logger.info(f"Enviando query: {prompt}")
        
        async for message in query(prompt=prompt):
            if isinstance(message, AssistantMessage):
                for block in message.content:
                    if isinstance(block, TextBlock):
                        print(f"üìù Claude: {block.text}")
                        logger.info(f"Resposta recebida: {block.text[:50]}...")
            elif isinstance(message, ResultMessage):
                logger.info("ResultMessage recebida")
        
        logger.info("Query executada com sucesso")
        print("‚úÖ Query executada com sucesso!")
        
    except Exception as e:
        logger.error(f"Erro durante execu√ß√£o: {e}", exc_info=True)
        print(f"‚ùå Erro: {e}")
        print("üìù Verifique os logs para mais detalhes")

async def exemplo_tratamento_robusto():
    """
    Exemplo de tratamento robusto combinando todas as t√©cnicas
    """
    print("\n" + "=" * 60)
    print("üõ°Ô∏è EXEMPLO 6: TRATAMENTO ROBUSTO COMPLETO")
    print("=" * 60)
    
    def handle_error(error, context=""):
        """Fun√ß√£o centralizada para tratamento de erros"""
        error_type = type(error).__name__
        
        print(f"‚ùå Erro ({error_type}): {error}")
        
        if isinstance(error, CLINotFoundError):
            print("üí° Solu√ß√£o: npm install -g @anthropic-ai/claude-code")
        elif isinstance(error, CLIConnectionError):
            print("üí° Solu√ß√£o: Verifique conex√£o de rede e status do Claude Code")
        elif isinstance(error, ProcessError):
            print(f"üí° Solu√ß√£o: Verifique permiss√µes e comandos executados")
        else:
            print("üí° Solu√ß√£o: Erro inesperado, verifique logs para mais detalhes")
        
        logger.error(f"Erro em {context}: {error}", exc_info=True)
    
    try:
        logger.info("Iniciando exemplo de tratamento robusto")
        
        prompt = "Me explique o que √© programa√ß√£o ass√≠ncrona em Python"
        
        print(f"üîç Query: '{prompt}'")
        print("-" * 40)
        
        async for message in query(prompt=prompt):
            if isinstance(message, AssistantMessage):
                for block in message.content:
                    if isinstance(block, TextBlock):
                        print(f"üìù Claude: {block.text}")
            elif isinstance(message, ResultMessage):
                if hasattr(message, 'total_cost_usd') and message.total_cost_usd:
                    print(f"\nüí∞ Custo: ${message.total_cost_usd:.6f}")
        
        print("‚úÖ Query executada com sucesso!")
        logger.info("Exemplo de tratamento robusto executado com sucesso")
        
    except CLINotFoundError as e:
        handle_error(e, "CLI n√£o encontrado")
    except CLIConnectionError as e:
        handle_error(e, "Problema de conex√£o")
    except ProcessError as e:
        handle_error(e, "Erro de processo")
    except Exception as e:
        handle_error(e, "Erro inesperado")

async def main():
    """
    Fun√ß√£o principal que executa todos os exemplos
    """
    print("‚ö†Ô∏è DEMONSTRA√á√ÉO DO TRATAMENTO DE ERROS DO CLAUDE CODE SDK PYTHON")
    print("=" * 60)
    
    try:
        # Executa todos os exemplos
        await exemplo_erro_cli_nao_encontrado()
        await exemplo_erro_conexao()
        await exemplo_erro_processo()
        await exemplo_retry_automatico()
        await exemplo_logging_erros()
        await exemplo_tratamento_robusto()
        
        print("\n" + "=" * 60)
        print("üéâ TODOS OS EXEMPLOS EXECUTADOS COM SUCESSO!")
        print("=" * 60)
        
        print("\nüìö O QUE VOC√ä APRENDEU:")
        print("   ‚úÖ Como identificar diferentes tipos de erro")
        print("   ‚úÖ Como tratar exce√ß√µes espec√≠ficas do SDK")
        print("   ‚úÖ Como implementar retry autom√°tico")
        print("   ‚úÖ Como fazer logging para debug")
        print("   ‚úÖ Como criar tratamento robusto de erros")
        print("   ‚úÖ Como fornecer mensagens de erro amig√°veis")
        
        print("\nüöÄ PR√ìXIMOS PASSOS:")
        print("   - Implemente retry em suas aplica√ß√µes")
        print("   - Configure logging apropriado")
        print("   - Crie tratamento de erro personalizado")
        print("   - Teste cen√°rios de falha")
        
    except Exception as e:
        print(f"\n‚ùå Erro durante execu√ß√£o: {e}")
        logger.error(f"Erro fatal: {e}", exc_info=True)
        sys.exit(1)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã Programa interrompido!")
        sys.exit(0)
